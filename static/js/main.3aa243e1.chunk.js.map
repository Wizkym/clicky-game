{"version":3,"sources":["components/Jumbotron/Jumbotron.js","components/CharCard/CharCard.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Jumbotron","react_default","a","createElement","className","this","props","score","status","Component","CharCard","onClick","shuffleCards","id","src","image","alt","name","Footer","App","state","chars","clickedCharIds","_this","includes","setState","push","length","i","j","Math","floor","random","_ref","_this2","components_Jumbotron_Jumbotron","map","char","components_CharCard_CharCard","key","components_Footer_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wjEAeeA,0LAVP,OACIC,EAAAC,EAAAC,cAAA,UAAQC,UAAY,UAChBH,EAAAC,EAAAC,cAAA,oCACAF,EAAAC,EAAAC,cAAA,qIACAF,EAAAC,EAAAC,cAAA,oBAAYE,KAAKC,MAAMC,OACvBN,EAAAC,EAAAC,cAAA,qBAAaE,KAAKC,MAAME,gBAPhBC,cCWTC,SAVC,SAAAJ,GAAK,OACjBL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOO,QAAS,kBAAML,EAAMM,aAAaN,EAAMO,MAC1DZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBAAsBU,IAAKR,EAAMS,MAAOC,IAAKV,EAAMW,YCCnEC,SANA,kBACXjB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,iBACdH,EAAAC,EAAAC,cAAA,uCCgEOgB,6MA7DXC,MAAQ,CACJC,QACAC,eAAgB,GAChBf,MAAO,EACPC,OAAQ,MAIZI,aAAe,SAAAC,GACX,IAAIS,EAAiBC,EAAKH,MAAME,eAGhC,GAAGA,EAAeE,SAASX,GACvBU,EAAKE,SAAS,CAAEH,eAAgB,GAAIf,MAAO,EAAGC,OAAS,mDAOvD,GAHAc,EAAeI,KAAKb,GAGS,KAA1BS,EAAeK,OAAlB,CAKAJ,EAAKE,SAAS,CAAEJ,QAAOC,iBAAgBf,MAAOe,EAAeK,OAAQnB,OAAQ,MAC7E,IAAK,IAAIoB,EAAIP,EAAMM,OAAS,EAAGC,EAAI,EAAGA,IAAK,CACvC,IAAIC,EAAIC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IADDK,EAEhB,CAACZ,EAAMQ,GAAIR,EAAMO,IAAvCP,EAAMO,GAFgCK,EAAA,GAE5BZ,EAAMQ,GAFsBI,EAAA,SALvCV,EAAKE,SAAS,CAAClB,MAAO,GAAIC,OAAQ,4CAA6Cc,eAAgB,8EAYlG,IAAAY,EAAA7B,KACL,OACIJ,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACgC,EAAD,CACI5B,MAAOF,KAAKe,MAAMb,MAClBC,OAAQH,KAAKe,MAAMZ,SAEvBP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACVC,KAAKe,MAAMC,MAAMe,IAAI,SAAAC,GAAI,OACtBpC,EAAAC,EAAAC,cAACmC,EAAD,CACI1B,aAAcsB,EAAKtB,aACnBC,GAAIwB,EAAKxB,GACT0B,IAAKF,EAAKxB,GACVE,MAAOsB,EAAKtB,WAIxBd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAInBH,EAAAC,EAAAC,cAACqC,EAAD,cAxDE/B,aCKEgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3aa243e1.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Jumbotron.css\";\n\nclass Jumbotron extends Component {\n    render () {\n        return (\n            <header className = \"header\">\n                <h1>SouthPark Clicky Game!</h1>\n                <h2>Click on any image to earn a point, but don't click on the same picture more than once. Click all 12 pics, and you win.</h2>\n                <h2>Score: {this.props.score}</h2>\n                <h2>Status: {this.props.status}</h2>\n            </header>\n        );\n    }\n}\nexport default Jumbotron;","import React from \"react\";\nimport \"./CharCard.css\";\n\n//pass the image into each card so all 12 are rendered\nconst CharCard= props => (\n    <div className=\"col-sm-6 col-md-3 my-card\">\n        <div className=\"card\" onClick={() => props.shuffleCards(props.id)}>\n            <div className=\"img-container\">\n                <img className=\"card-img-top center\" src={props.image} alt={props.name}/>\n            </div>\n        </div>\n    </div>\n);\n\nexport default CharCard;","import React from \"react\";\nimport \"./Footer.css\";\n\nconst Footer = () => (\n    <footer className=\"footer center\">\n        <small>&copy; Copyright 2018</small>\n    </footer>\n);\n\nexport default Footer;","import React, { Component } from 'react';\nimport './App.css';\nimport chars from \"./chars\";\nimport Jumbotron from \"./components/Jumbotron\"\nimport CharCard from \"./components/CharCard\";\nimport Footer from \"./components/Footer\";\n\nclass App extends Component {\n    state = {\n        chars,\n        clickedCharIds: [],\n        score: 0,\n        status: \"\"\n    };\n\n    // Shuffle the pup cards in the browser when clicked\n    shuffleCards = id => {\n        let clickedCharIds = this.state.clickedCharIds;\n\n        // If the clicked array contains the id of the clicked card ==> Game Over!!\n        if(clickedCharIds.includes(id)){\n            this.setState({ clickedCharIds: [], score: 0, status:  \"Game Over! You lost. Click to play again!\" });\n            return;\n        }else{\n            // If the id is not in the array, add it\n            clickedCharIds.push(id);\n\n            // if all the cards have been clicked without repetition ==> You Win!!\n            if(clickedCharIds.length === 12){\n                this.setState({score: 12, status: \"You Won! Great Job!! Click to play again!\", clickedCharIds: []});\n                return;\n            }\n            // Shuffle\n            this.setState({ chars, clickedCharIds, score: clickedCharIds.length, status: \" \" });\n            for (let i = chars.length - 1; i > 0; i--) {\n                let j = Math.floor(Math.random() * (i + 1));\n                [chars[i], chars[j]] = [chars[j], chars[i]];\n            }\n        }\n    };\n\n    render() {\n        return (\n            <div>\n                <Jumbotron\n                    score={this.state.score}\n                    status={this.state.status}\n                />\n                <div className=\"container\">\n                    <div className=\"row\">\n                        {this.state.chars.map(char => (\n                            <CharCard\n                                shuffleCards={this.shuffleCards}\n                                id={char.id}\n                                key={char.id}\n                                image={char.image}\n                            />\n                        ))}\n                    </div>\n                    <div className=\"push\">\n\n                    </div>\n                </div>\n                <Footer />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}